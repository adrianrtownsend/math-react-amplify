type ClassStudent @model(queries: null)
@key(name: "byClass", fields: ["classID", "studentID"])
@key(name: "byStudent", fields: ["studentID", "classID"])
@auth(rules: [
  { allow: groups, groups: ["Admin", "Teachers"] },
  { allow: groups, groups: ["Students"], operations: [create, read] },
  { allow: owner, operations: [delete] }
])
{
  id: ID!
  classID: ID!
  studentID: ID!
  class: Class! @connection(fields: ["classID"])
  student: Student! @connection(fields: ["studentID"])
  isDeleted: Boolean!
}

type Class @model
@key(name: "byTeacher", fields: ["teacherID", "id"])
@key(name: "bySubject", fields: ["subjectID", "id"])
@auth(rules: [
  { allow: groups, groups: ["Admin"] },
  { allow: owner },
  { allow: groups, groups: ["Teachers"], operations: [create, read] }
  { allow: groups, groups: ["Students"], operations: [read] }
]) 
{
  id: ID!
  name: String!
  code: String! #uniqiue
  studentLimit: Int!
  status: ModelClassStatus!
  teacherID: ID!
  subjectID: ID!
  assignments: [Assignment] @connection(keyName: "byClass", fields: ["id"])
  students: [ClassStudent] @connection(keyName: "byClass", fields: ["id"])
  isDeleted: Boolean!
}


enum ModelClassStatus {
  inactive
  open
  active
  closed
}